name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-binaries:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-x64
            node: 20
          - os: macos-latest
            target: darwin-x64
            node: 20
          - os: macos-latest
            target: darwin-arm64
            node: 20
          - os: windows-latest
            target: win32-x64
            node: 20
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          
      - uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build
        run: pnpm build
        
      - name: Build binary
        run: |
          bun build ./dist/cli.js --compile --target=bun-${{ matrix.target }} --outfile embed-${{ matrix.target }}
          
      - name: Archive binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          tar -czf embed-${{ matrix.target }}.tar.gz embed-${{ matrix.target }}
          
      - name: Archive binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          7z a -tzip embed-${{ matrix.target }}.zip embed-${{ matrix.target }}.exe
          
      - name: Upload Release Asset (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./embed-${{ matrix.target }}.tar.gz
          asset_name: embed-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./embed-${{ matrix.target }}.zip
          asset_name: embed-${{ matrix.target }}.zip
          asset_content_type: application/zip

  publish-npm:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          
      - uses: pnpm/action-setup@v2
        with:
          version: 9
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build
        run: pnpm build
        
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  update-homebrew-tap:
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: embeddable-hq/homebrew-embeddable
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          
      - name: Update formula
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          URL="https://github.com/embeddable-hq/embeddable-cli/archive/refs/tags/v${VERSION}.tar.gz"
          
          # Download the tarball to calculate SHA256
          curl -L -o embeddable-cli.tar.gz "$URL"
          SHA256=$(sha256sum embeddable-cli.tar.gz | cut -d' ' -f1)
          
          # Update the formula
          sed -i "s|url \".*\"|url \"$URL\"|" Formula/embed.rb
          sed -i "s|sha256 \".*\"|sha256 \"$SHA256\"|" Formula/embed.rb
          
      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/embed.rb
          git commit -m "Update embed to version ${GITHUB_REF#refs/tags/}"
          git push